{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","state","todos","inputText","deleteHandler","index","Object","toConsumableArray","_this","splice","setState","onChangeHandler","event","target","value","addNewHandler","push","onKeyPress","key","_this2","this","react_default","a","createElement","className","type","placeholder","onChange","onClick","map","todo","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAyEeA,6MAnEbC,MAAQ,CACNC,MAAO,CACL,oBACA,qBACA,0CAEFC,UAAW,MAGbC,cAAgB,SAACC,GACf,IAAMH,EAAKI,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMC,OAC7BA,EAAMO,OAAOJ,EAAO,GACpBG,EAAKE,SAAS,CAAER,MAAOA,OAGzBS,gBAAkB,SAACC,GACjBJ,EAAKE,SAAS,CAAEP,UAAWS,EAAMC,OAAOC,WAG1CC,cAAgB,WACd,GAAGP,EAAKP,MAAME,UAAW,CACvB,IAAMD,EAAKI,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMC,OAC7BA,EAAMc,KAAKR,EAAKP,MAAME,WACtBK,EAAKE,SAAS,CAAER,MAAOA,EAAOC,UAAW,SAI7Cc,WAAa,SAACL,GACK,UAAdA,EAAMM,KACPV,EAAKO,yFAIA,IAAAI,EAAAC,KAEP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,WAC7BC,SAAUP,KAAKT,gBACfM,WAAYG,KAAKH,WACjBH,MAAOM,KAAKnB,MAAME,YACpBkB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMI,QAASR,KAAKL,eAAtC,SAGJM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,IAA2BH,EAAAC,EAAAC,cAAA,oBAA3B,KAA8CF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,QAA9C,IAAiFH,EAAAC,EAAAC,cAAA,sBAAjF,KACEH,KAAKnB,MAAMC,MAAM2B,IAAI,SAACC,EAAMzB,GAAP,OACrBgB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYN,IAAKY,GAC7BT,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACfH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,aACZJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQnB,EAAM,EAA9B,KAAmCyB,EAAnC,MAEFT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMI,QAAS,kBAAMT,EAAKf,cAAcC,KAA1D,sBA5DI0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f35e38e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import AddTodos from './addTodos';\r\n// import TodoList from './todoList';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    todos: [\r\n      'Buy some Old Toby',\r\n      'Go on an Adventure',\r\n      'Don\\'t forget the handkerchief and pipe',\r\n    ],\r\n    inputText: '',\r\n  }\r\n\r\n  deleteHandler = (index) => {\r\n    const todos = [...this.state.todos];\r\n    todos.splice(index, 1);\r\n    this.setState({ todos: todos });\r\n  }\r\n\r\n  onChangeHandler = (event) => {\r\n    this.setState({ inputText: event.target.value });\r\n  }\r\n\r\n  addNewHandler = () => {\r\n    if(this.state.inputText) {\r\n      const todos = [...this.state.todos];\r\n      todos.push(this.state.inputText);\r\n      this.setState({ todos: todos, inputText: '' });\r\n    }\r\n  }\r\n\r\n  onKeyPress = (event) => {\r\n    if(event.key === 'Enter'){\r\n      this.addNewHandler();\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='main-container'>\r\n        <h1>Hobbit Todos</h1>\r\n        <div className=\"task-wrap\">\r\n          <h2>Add New Task</h2>\r\n          <div className='input-wrap'>\r\n            <input type=\"text\" placeholder='New Task'\r\n              onChange={this.onChangeHandler} \r\n              onKeyPress={this.onKeyPress}  \r\n              value={this.state.inputText}/>\r\n            <button className='btn' onClick={this.addNewHandler}>Add</button>\r\n          </div>\r\n        </div>\r\n        <h2 className='task-list'> Task list: </h2>\r\n        <ul className='list'>\r\n          <li className='list-item'> <span>Done</span>  <span className='item'>Task</span> <span>Delete</span> </li>\r\n          { this.state.todos.map((todo, index) => \r\n            <li className='list-item' key={todo}>\r\n              <label className=\"container\">\r\n                <input type=\"checkbox\" />\r\n                <span className=\"checkmark\"></span>\r\n                <span className='text'>{index+1}. {todo} </span> \r\n              </label> \r\n              <button className='btn' onClick={() => this.deleteHandler(index)}>Delete</button>\r\n            </li>\r\n          ) } \r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
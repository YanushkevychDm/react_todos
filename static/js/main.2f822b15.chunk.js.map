{"version":3,"sources":["components/addTodos.js","components/todoList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTodos","props","react_default","a","createElement","className","type","placeholder","onChange","onKeyPress","enter","value","input","onClick","addNew","TodoList","todos","map","todo","index","key","delete","App","state","inputText","deleteHandler","Object","toConsumableArray","_this","splice","setState","onChangeHandler","event","target","addNewHandler","push","addTodos","this","todoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAoBeA,EAlBE,SAACC,GAChB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,WAC7BC,SAAUP,EAAMO,SAChBC,WAAYR,EAAMS,MAClBC,MAAOV,EAAMW,QACfV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMQ,QAASZ,EAAMa,QAAvC,WCWKC,EAtBE,SAACd,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,IAA2BH,EAAAC,EAAAC,cAAA,oBAA3B,KAA8CF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,QAA9C,IAAiFH,EAAAC,EAAAC,cAAA,sBAAjF,KACCH,EAAMe,MAAMC,IAAK,SAACC,EAAMC,GAAP,OAClBjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYe,IAAKF,GAC7BhB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACfH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,aACZJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQc,EAAM,EAA9B,KAAmCD,EAAnC,MAEFhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcQ,QAAS,kBAAMZ,EAAMoB,OAAOF,KAA5D,UACAjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBQ,QAAS,kBAAMZ,EAAMoB,OAAOF,KAA9D,WCsCGG,6MAjDbC,MAAQ,CACNP,MAAO,CACL,oBACA,qBACA,0CAEFQ,UAAW,MAGbC,cAAgB,SAACN,GACf,IAAMH,EAAKU,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMP,OAC7BA,EAAMa,OAAOV,EAAO,GACpBS,EAAKE,SAAS,CAAEd,MAAOA,OAGzBe,gBAAkB,SAACC,GACjBJ,EAAKE,SAAS,CAAEN,UAAWQ,EAAMC,OAAOtB,WAG1CuB,cAAgB,WACd,GAAGN,EAAKL,MAAMC,UAAW,CACvB,IAAMR,EAAKU,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMP,OAC7BA,EAAMmB,KAAKP,EAAKL,MAAMC,WACtBI,EAAKE,SAAS,CAAEd,MAAOA,EAAOQ,UAAW,SAI7Cf,WAAa,SAACuB,GACK,UAAdA,EAAMZ,KACPQ,EAAKM,yFAKP,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACgC,EAAD,CACE5B,SAAY6B,KAAKN,gBACjBjB,OAAYuB,KAAKH,cACjBxB,MAAY2B,KAAK5B,WACjBG,MAAYyB,KAAKd,MAAMC,YACzBtB,EAAAC,EAAAC,cAACkC,EAAD,CACEtB,MAAUqB,KAAKd,MAAMP,MACrBK,OAAUgB,KAAKZ,wBA5CPc,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f822b15.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddTodos = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>Hobbit Todos</h1>\r\n      <div className=\"task-wrap\">\r\n        <h2>Add New Task</h2>\r\n        <div className='input-wrap'>\r\n          <input type=\"text\" placeholder='New Task'\r\n            onChange={props.onChange} \r\n            onKeyPress={props.enter}  \r\n            value={props.input}/>\r\n          <button className='btn' onClick={props.addNew}>Add</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTodos;","import React from 'react';\r\n\r\nconst TodoList = (props) => {\r\n  return (\r\n    <div className='wrapper'>\r\n        <h2 className='task-list'> Task list: </h2>\r\n        <ul className='list'>\r\n          <li className='list-item'> <span>Done</span>  <span className='item'>Task</span> <span>Delete</span> </li>\r\n          {props.todos.map( (todo, index) => \r\n          <li className='list-item' key={todo}>\r\n            <label className=\"container\">\r\n              <input type=\"checkbox\" />\r\n              <span className=\"checkmark\"></span>\r\n              <span className='text'>{index+1}. {todo} </span> \r\n            </label> \r\n            <button className='btn btn-big' onClick={() => props.delete(index)}>Delete</button>\r\n            <button className='btn btn-small' onClick={() => props.delete(index)}>X</button>\r\n          </li>\r\n          )}\r\n        </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","import React, {Component} from 'react';\r\nimport AddTodos from './addTodos';\r\nimport TodoList from './todoList';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [\r\n      'Buy some Old Toby',\r\n      'Go on an Adventure',\r\n      'Don\\'t forget the handkerchief and pipe',\r\n    ],\r\n    inputText: '',\r\n  }\r\n\r\n  deleteHandler = (index) => {\r\n    const todos = [...this.state.todos];\r\n    todos.splice(index, 1);\r\n    this.setState({ todos: todos });\r\n  }\r\n\r\n  onChangeHandler = (event) => {\r\n    this.setState({ inputText: event.target.value });\r\n  }\r\n\r\n  addNewHandler = () => {\r\n    if(this.state.inputText) {\r\n      const todos = [...this.state.todos];\r\n      todos.push(this.state.inputText);\r\n      this.setState({ todos: todos, inputText: '' });\r\n    }\r\n  }\r\n\r\n  onKeyPress = (event) => {\r\n    if(event.key === 'Enter'){\r\n      this.addNewHandler();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='main-container'>\r\n        <AddTodos \r\n          onChange = {this.onChangeHandler}\r\n          addNew   = {this.addNewHandler}\r\n          enter    = {this.onKeyPress}\r\n          input    = {this.state.inputText} />\r\n        <TodoList \r\n          todos  = {this.state.todos}  \r\n          delete = {this.deleteHandler}  />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}